name: Validate Commenter

on:
  workflow_run:
    workflows: ["Validate Marketplace Integrations"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write

jobs:
  comment:
    name: Post report to PR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'success' }}

    steps:
      - name: Derive PR number and fetch artifact metadata
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const pr = (run.pull_requests && run.pull_requests[0]) || null;
            if (!pr) {
              core.setFailed('No PR is associated with this workflow_run.');
              return;
            }
            const {owner, repo} = context.repo;
            const {data: list} = await github.rest.actions.listWorkflowRunArtifacts({
              owner, repo, run_id: run.id
            });
            const art = list.artifacts.find(a => a.name === 'validation-report');
            if (!art) {
              core.setFailed('validation-report artifact not found.');
              return;
            }
            core.setOutput('pr_number', pr.number.toString());
            core.setOutput('artifact_id', art.id.toString());

      - name: Download artifact zip
        uses: actions/github-script@v7
        env:
          artifact_id: ${{ steps.meta.outputs.artifact_id }}
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            const id = Number(process.env.artifact_id);
            const {data} = await github.rest.actions.downloadArtifact({
              owner, repo, artifact_id: id, archive_format: 'zip'
            });
            fs.writeFileSync('artifact.zip', Buffer.from(data));

      - name: Unzip artifact
        run: unzip -o artifact.zip -d artifacts

      - name: Sanitize report
        run: |
          python - << 'PY'
import re
p='artifacts/validation_report.md'
t=open(p,'r',encoding='utf-8').read()
t=re.sub(r'@', '@\u200b', t)  # prevent @ mentions
MAX=50000
if len(t) > MAX:
    t = t[:MAX] + "\n\n…truncated…"
open(p,'w',encoding='utf-8').write(t)
PY

      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('artifacts/validation_report.md','utf8');
            const finalComment =
`❌ **Marketplace Validation Failed**
<details>
<summary>Click to view the full validation report</summary>

---

${body}
</details>`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number('${{ steps.meta.outputs.pr_number }}'),
              body: finalComment
            });
